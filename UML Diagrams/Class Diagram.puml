@startuml "Class Diagram"

package DroneTools <<Frame>> {
    class Actions {
        + echo(JSONObject, JSONObject, Direction) : void
        + fly(JSONObject) : void
        + stop(JSONObject) : void
        + heading(JSONObject, JSONObject, Direction) : void
        + scan(JSONObject) : void
        + land(JSONObject, JSONObject) : void
        + explore(JSONObject) : void
        + scout(JSONObject, JSONObject, Direction) : void
        + moveTo(JSONObject, JSONObject, Direction) : void
    }

    class Compass {
        + getLeftDirection(Direction) : Direction
        + getRightDirection(Direction) : Direction
    }

    interface DimensionFinder {
        getDimension(BaseDrone, JSONObject, JSONObject) : void
    }

    enum Direction {
        N,
        E,
        W,
        S,
        FORWARD,
        LEFT,
        RIGHT
    }
    
    interface DroneFlightManager {
        fly(BaseDrone, JSONObject, JSONObject) : void
    }

    class FatalErrorHandler {
        + FatalErrorHandler(BaseDrone, MapArea)
        + setRangeDanger(int) : void
        + handleDanger(JSONObject, JSONObject) : void
        + setBatteryDanger(boolean) : void
        + getDanger() : boolean
        + changeDirection(MapArea) : Direction
    }

    interface SearchAlgorithm {
        + search(BaseDrone, JSONObject, JSONObject) : void
        + setDimensions(int, int) : void
    }

    interface State {
        + handle(BaseDrone, JSONObject, JSONObject) : void
    }

    enum Status {
        GROUND_FINDER_STATE,
        CENTER_START_STATE,
        WIDTH_STATE,
        LENGTH_STATE,
        MOVE_CENTER_STATE,
        CENTER_STATE
    }
}

package Drones <<Frame>> {
    abstract class BaseDrone {
        # minimumBatteryToOperate : int
        # currentBatteryLevel : int
        # status : Status
        # action : Actions
        # mapArea : MapArea
        + {abstract} updateDrone(int, Direction) : void
        + {abstract} getStatus() : Status
        + {abstract} setStatus(Status) : void
        + {abstract} getBatteryLevel() : int
        + {abstract} stop(JSONObject) : void
        + {abstract} fly(JSONObject) : void
        + {abstract} canMakeDecision(int) : boolean
        + {abstract} useBattery(int) : void
        + {abstract} echo(JSONObject, JSONObject, Direction) : void
        + {abstract} updateHeading(JSONObject, JSONObject, Direction) : void
        + {abstract} scan(JSONObject) : void
    }

    class Drone extends BaseDrone {
        + Drone(int, MapArea)
        + ^updateDrone(int, Direction) : void
        + ^getBatteryLevel() : int
        + ^getStatus() : Status
        + ^setStatus(Status) : void
        + ^fly(JSONObject) : void
        + ^echo(JSONObject, JSONObject, Direction) : void
        + ^stop(JSONObject) : void
        + ^scan(JSONObject) : void
        + ^updateHeading(JSONObject, JSONObject, Direction) : void
        + ^canMakeDecision(int) : boolean
        + ^useBattery(int) : void
    }
}

package Exploration <<Frame>> {
    class DecisionMaker {
        + DecisionMaker(BaseDrone, MapArea, FatalErrorHandler)
        + makeDecisions(JSONObject, JSONObject) : void
    }

    class Explorer implements IExplorerRaid {
        + ^initialize(String) : void
        + ^takeDecision() : String
        + ^acknowledgeResults(String) : void
        + ^deliverFinalReport() : String
    }

    class MapArea {
        + addCreek(POI) : void
        + viewCreeks() : void
        + setEmergencySite(POI) : void
        + fromString(String) : Direction
        + updateCoordinate(Direction) : void
        + setObtainedWidth(boolean) : void
        + setObtainedLength(boolean) : void
        + setWidthStartPoint(int) : void
        + setWidthEndPoint(int) : void
        + setLengthStartPoint(int) : void
        + setLengthEndPoint(int) : void
        + setIsAbove(boolean) : void
        + hasObtainedWidth() : boolean
        + hasObtainedLength() : boolean
        + getGroundStatus() : boolean
        + setGroundStatus(boolean) : void
        + setCurrentAction(String) : void
        + getCurrentAction() : String
        + getCreeks() : Set<POI>
        + getEmergencySite() : POI
        + getEmergencySiteStatus() : boolean
        + getIsAbove() : boolean
        + getDroneX() : int
        + getDroneY() : int
        + getPrevEchoDirection() : Direction
        + getNewHeading() : Direction
        + getGroundEchoDirection() : Direction
        + getPrevHeading() : Direction
        + getHeading() : Direction
        + getWidthOfIsland() : int
        + getLengthOfIsland() : int
        + getStartDirection() : Direction
        + getSpiralTurnDirection() : Direction
        + setSpiralTurnDirection(Direction) : void
        + setStartDirection(Direction) : void
        + setGroundEchoDirection(Direction) : void
        + setNewHeading(Direction) : void
        + setPrevEchoDirection(Direction) : void
        + setHeading(Direction) : void
        + setLastDistance(int) : void
        + getLastDistance() : int
        + setNorthDistance(int) : void
        + setEastDistance(int) : void
        + setWestDistance(int) : void
        + setSouthDistance(int) : void
        + getNorthDistance() : int
        + getEastDistance() : int
        + getWestDistance() : int
        + getSouthDistance() : int
    }

    class Reporter {
        + Reporter(MapArea)
        + deliverReport() : String

    }

    class ResultsAcknowledger {
        + ResultsAcknowledger(BaseDrone, MapArea, FatalErrorHandler)
        + determineCost(JSONObject) : void
        + displayStatus(JSONObject) : void
        + parseRecord(JSONObject) : void
        + displayBatteryHeading() : void

    }

    class Runner {
        + {static} main(String[] args) : void
    }

    interface IExplorerRaid {
        + initialize(String) : void
        + takeDecision() : String
        + acknowledgeResults() : void
        + deliverFinalReport() : String
    }
}

package Locations <<Frame>> {
    class POI {
        + POI(Point, String)
        + getPOIPoint() : Point
        + getDistance(POI) : double
        + getID() : String
        + toString() : String
    }
    
    class Point {
        + Point(int, int)
        + setXCoordinate(int) : void
        + setYCoordinate(int) : void
        + setCoordinate(int, int) : void
        + getXCoordinate() : int
        + getYCoordinate() : int
        + toString() : String
    }
}

package States <<Frame>> {
    class CenterStartHandlerState implements DroneFlightManager, State {
        + CenterStartHandlerState(MapArea)
        + ^handle(BaseDrone, JSONObject, JSONObject) : void
        + ^fly(BaseDrone, JSONObject, JSONObject) : void
    }

    class GroundFinderState implements DroneFlightManager, State {
        + GroundFinderState(MapArea)
        + ^handle(BaseDrone, JSONObject, JSONObject) : void
        + ^fly(BaseDrone, JSONObject, JSONObject) : void
    }

    class LengthFinderState implements DimensionFinder, State {
        + LengthFinderState(MapArea)
        + ^handle(BaseDrone, JSONObject, JSONObject) : void
        + ^getDimension(BaseDrone, JSONObject, JSONObject) : void
    }

    class ReachCenterState implements DroneFlightManager, State {
        + ReachCenterState(MapArea)
        + ^handle(BaseDrone, JSONObject, JSONObject) : void
        + ^fly(BaseDrone, JSONObject, JSONObject) : void
    }

    class SpiralSearchState implements SearchAlgorithm, State {
        + SpiralSearchState(MapArea)
        + ^handle(BaseDrone, JSONObject, JSONObject) : void
        + ^search(BaseDrone, JSONObject, JSONObject)
    }

    class WidthFinderState implements DimensionFinder, State {
        + WidthFinderState(MapArea)
        + ^handle(BaseDrone, JSONObject, JSONObject) : void
        + ^getDimension(BaseDrone, JSONObject, JSONObject) : void
    }
    
}

@enduml